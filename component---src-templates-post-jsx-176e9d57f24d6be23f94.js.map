{"version":3,"sources":["webpack:///./src/components/UserInfo/index.jsx","webpack:///./src/components/Disqus/index.jsx","webpack:///./src/components/PostInfo/index.jsx","webpack:///./src/components/SocialLinks/index.jsx","webpack:///./src/components/PostSuggestions/index.jsx","webpack:///./src/templates/post.jsx","webpack:///./src/components/SEO/index.jsx","webpack:///./src/components/PostTags/index.jsx","webpack:///./src/components/PostCover/PostCoverComponent.jsx","webpack:///./src/components/PostCover/index.jsx"],"names":["Component","PostInfo","render","postNode","this","props","post","frontmatter","react_default","a","createElement","className","CardTitle_default","avatar","Avatars_default","icon","FontIcons_default","iconClassName","title","subtitle","timeToRead","gatsby_browser_entry","to","kebabCase_default","category","SocialLinks","_this$props","postPath","mobile","url","urljoin","config","siteUrl","pathPrefix","iconSize","renderShareCount","count","filter","RedditShareButton","RedditIcon","round","size","RedditShareCount","TwitterShareButton","TwitterIcon","GooglePlusShareButton","GooglePlusIcon","GooglePlusShareCount","FacebookShareButton","quote","excerpt","FacebookIcon","FacebookShareCount","LinkedinShareButton","description","LinkedinIcon","LinkedinShareCount","TelegramShareButton","TelegramIcon","PostTemplate","_this","_React$Component","call","state","handleResize","bind","assertThisInitialized_default","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","innerWidth","setState","slug","pageContext","postOverlapClass","data","markdownRemark","id","category_id","postDefaultCategoryID","coverHeight","layout","location","Helmet_default","siteTitle","rel","href","SEO","postSEO","PostCover","coverClassName","Cards_default","CardText_default","components_PostInfo","dangerouslySetInnerHTML","__html","html","PostTags","tags","components_SocialLinks","React","pageQuery","image","postURL","postMeta","cover","siteDescription","siteLogo","blogURL","schemaOrgJSONLD","@context","@type","name","alternateName","siteTitleAlt","push","itemListElement","position","item","@id","headline","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","content","type","JSON","stringify","property","siteFBAppID","userTwitter","react__WEBPACK_IMPORTED_MODULE_2___default","map","tag","gatsby__WEBPACK_IMPORTED_MODULE_3__","key","style","textDecoration","lodash_kebabCase__WEBPACK_IMPORTED_MODULE_1___default","react_md_lib_Chips__WEBPACK_IMPORTED_MODULE_4___default","label","fileEdges","coverNodeList","fileNode","node","childImageSharp","absolutePath","indexOf","path","join","length","gatsby_image_default","fluid","outerWrapperClassName","height","width","coverURL","substring","__PATH_PREFIX__","backgroundImage","queryWrapper","query","PostCoverComponent","allFile","edges","_590853412"],"mappings":"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","file":"component---src-templates-post-jsx-176e9d57f24d6be23f94.js","sourcesContent":["import React, { Component } from \"react\";\nimport Card from \"react-md/lib/Cards/Card\";\nimport CardTitle from \"react-md/lib/Cards/CardTitle\";\nimport CardText from \"react-md/lib/Cards/CardText\";\nimport Avatar from \"react-md/lib/Avatars\";\nimport FontIcon from \"react-md/lib/FontIcons\";\nimport IconSeparator from \"react-md/lib/Helpers/IconSeparator\";\nimport { Follow } from \"react-twitter-widgets\";\nimport UserLinks from \"../UserLinks\";\nimport \"./UserInfo.scss\";\n\nclass UserInfo extends Component {\n  render() {\n    const {\n      userAvatar,\n      userName,\n      userLocation,\n      userDescription,\n      userLinks,\n      userTwitter\n    } = this.props.config;\n    const { expanded } = this.props;\n    const userLinksElement = (\n      <UserLinks config={this.props.config} labeled={expanded} />\n    );\n    if (!userAvatar && !userName && !userLocation && !userDescription) {\n      if (userLinks) {\n        return (\n          <Card className=\"md-grid md-cell md-cell--12 user-info\">\n            {userLinksElement}\n          </Card>\n        );\n      }\n      return null;\n    }\n    return (\n      <Card className=\"md-grid md-cell md-cell--12 user-info\">\n        <CardTitle\n          expander={!expanded}\n          avatar={userAvatar && <Avatar src={userAvatar} role=\"presentation\" />}\n          title={userName && userName}\n          subtitle={\n            userTwitter ? (\n              <Follow\n                username={userTwitter}\n                options={{ count: expanded ? \"none\" : \"none\" }}\n              />\n            ) : (\n              \"Author\"\n            )\n          }\n        />\n        <CardText expandable={!expanded}>\n          {userLocation && (\n            <IconSeparator label={userLocation} iconBefore>\n              <FontIcon iconClassName=\"fa fa-map-marker\" />\n            </IconSeparator>\n          )}\n          <p>{userDescription && userDescription}</p>\n          {userLinksElement}\n        </CardText>\n      </Card>\n    );\n  }\n}\n\nexport default UserInfo;\n","import React, { Component } from \"react\";\nimport ReactDisqusComments from \"react-disqus-comments\";\nimport urljoin from \"url-join\";\nimport Card from \"react-md/lib/Cards/Card\";\nimport CardTitle from \"react-md/lib/Cards/CardTitle\";\nimport CardText from \"react-md/lib/Cards/CardText\";\nimport Avatar from \"react-md/lib/Avatars\";\nimport FontIcon from \"react-md/lib/FontIcons\";\nimport Snackbar from \"react-md/lib/Snackbars\";\nimport config from \"../../../data/SiteConfig\";\n\nclass Disqus extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      toasts: []\n    };\n    this.notifyAboutComment = this.notifyAboutComment.bind(this);\n    this.onSnackbarDismiss = this.onSnackbarDismiss.bind(this);\n  }\n\n  onSnackbarDismiss() {\n    const [, ...toasts] = this.state.toasts;\n    this.setState({ toasts });\n  }\n  notifyAboutComment() {\n    const toasts = this.state.toasts.slice();\n    toasts.push({ text: \"New comment available!\" });\n    this.setState({ toasts });\n  }\n  render() {\n    const { postNode, expanded } = this.props;\n    if (!config.disqusShortname) {\n      return null;\n    }\n    const post = postNode.frontmatter;\n    const url = urljoin(\n      config.siteUrl,\n      config.pathPrefix,\n      postNode.fields.slug\n    );\n\n    return (\n      <Card className=\"md-grid md-cell md-cell--12\">\n        <CardTitle\n          title=\"Comments\"\n          avatar={<Avatar icon={<FontIcon>comment</FontIcon>} />}\n          expander={!expanded}\n        />\n        <CardText expandable={!expanded}>\n          <ReactDisqusComments\n            shortname={config.disqusShortname}\n            identifier={post.title}\n            title={post.title}\n            url={url}\n            category_id={post.category_id}\n            onNewComment={this.notifyAboutComment}\n          />\n        </CardText>\n        <Snackbar\n          toasts={this.state.toasts}\n          onDismiss={this.onSnackbarDismiss}\n        />\n      </Card>\n    );\n  }\n}\n\nexport default Disqus;\n","import React, { Component } from \"react\";\nimport CardTitle from \"react-md/lib/Cards/CardTitle\";\nimport Avatar from \"react-md/lib/Avatars\";\nimport FontIcon from \"react-md/lib/FontIcons\";\nimport { Link } from \"gatsby\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\nimport config from \"../../../data/SiteConfig\";\nimport \"./PostInfo.scss\";\n\nclass PostInfo extends Component {\n  render() {\n    const { postNode } = this.props;\n    const post = postNode.frontmatter;\n    return (\n      <div className=\"post-info\">\n        <CardTitle\n          avatar={<Avatar icon={<FontIcon iconClassName=\"fa fa-calendar\" />} />}\n          // title={`Published on ${moment(postNode.fields.date).format(\n          //   config.dateFormat\n          // )}`}\n          title={post.title}\n          subtitle={`${postNode.timeToRead} min read`}\n        />\n        <Link\n          className=\"category-link\"\n          to={`/categories/${_.kebabCase(post.category)}`}\n        >\n          <CardTitle\n            avatar={\n              <Avatar icon={<FontIcon iconClassName=\"fa fa-folder-open\" />} />\n            }\n            title=\"In category\"\n            subtitle={post.category}\n          />\n        </Link>\n      </div>\n    );\n  }\n}\n\nexport default PostInfo;\n","import React, { Component } from \"react\";\nimport {\n  FacebookShareButton,\n  GooglePlusShareButton,\n  LinkedinShareButton,\n  TwitterShareButton,\n  TelegramShareButton,\n  RedditShareButton,\n  FacebookShareCount,\n  GooglePlusShareCount,\n  LinkedinShareCount,\n  RedditShareCount,\n  FacebookIcon,\n  TwitterIcon,\n  TelegramIcon,\n  GooglePlusIcon,\n  LinkedinIcon,\n  RedditIcon\n} from \"react-share\";\nimport urljoin from \"url-join\";\nimport config from \"../../../data/SiteConfig\";\nimport \"./SocialLinks.scss\";\n\nclass SocialLinks extends Component {\n  render() {\n    const { postNode, postPath, mobile } = this.props;\n    const post = postNode.frontmatter;\n    const url = urljoin(config.siteUrl, config.pathPrefix, postPath);\n    const iconSize = mobile ? 36 : 48;\n    const filter = count => (count > 0 ? count : \"\");\n    const renderShareCount = count => (\n      <div className=\"share-count\">{filter(count)}</div>\n    );\n\n    return (\n      <div className=\"social-links\">\n        <RedditShareButton url={url} title={post.title}>\n          <RedditIcon round size={iconSize} />\n          <RedditShareCount url={url}>\n            {count => renderShareCount(count)}\n          </RedditShareCount>\n        </RedditShareButton>\n        <TwitterShareButton url={url} title={post.title}>\n          <TwitterIcon round size={iconSize} />\n        </TwitterShareButton>\n        <GooglePlusShareButton url={url}>\n          <GooglePlusIcon round size={iconSize} />\n          <GooglePlusShareCount url={url}>\n            {count => renderShareCount(count)}\n          </GooglePlusShareCount>\n        </GooglePlusShareButton>\n        <FacebookShareButton url={url} quote={postNode.excerpt}>\n          <FacebookIcon round size={iconSize} />\n          <FacebookShareCount url={url}>\n            {count => renderShareCount(count)}\n          </FacebookShareCount>\n        </FacebookShareButton>\n        <LinkedinShareButton\n          url={url}\n          title={post.title}\n          description={postNode.excerpt}\n        >\n          <LinkedinIcon round size={iconSize} />\n          <LinkedinShareCount url={url}>\n            {count => renderShareCount(count)}\n          </LinkedinShareCount>\n        </LinkedinShareButton>\n        <TelegramShareButton url={url}>\n          <TelegramIcon round size={iconSize} />\n        </TelegramShareButton>\n      </div>\n    );\n  }\n}\n\nexport default SocialLinks;\n","import React, { Component } from \"react\";\nimport FontIcon from \"react-md/lib/FontIcons\";\nimport { Link } from \"gatsby\";\nimport \"./PostSuggestions.scss\";\n\nexport default class PostSuggestions extends Component {\n  render() {\n    const { postNode } = this.props;\n    const postFields = postNode.fields;\n    return (\n      <div className=\"post-suggestions md-grid md-cell--12\">\n        <Link to={postFields.prevSlug} className=\"post-suggestion\">\n          <FontIcon\n            forceFontSize\n            forceSize={64}\n            className=\"secondary-color arrow-nav\"\n          >\n            arrow_back\n          </FontIcon>\n          <div className=\"headline-container hide-on-mobile\">\n            <h2 className=\"md-body-2 secondary-color\">Previous</h2>\n            <h6 className=\"md-headline secondary-color\">\n              {postFields.prevTitle}\n            </h6>\n          </div>\n        </Link>\n        <Link to={postFields.nextSlug} className=\"post-suggestion\">\n          <div className=\"headline-container\">\n            <h2 className=\"md-body-2 secondary-color\">Next</h2>\n            <h6 className=\"md-headline secondary-color\">\n              {postFields.nextTitle}\n            </h6>\n          </div>\n          <FontIcon\n            forceFontSize\n            forceSize={64}\n            className=\"secondary-color arrow-nav\"\n          >\n            arrow_forward\n          </FontIcon>\n        </Link>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport Helmet from \"react-helmet\";\nimport { graphql } from \"gatsby\";\nimport Card from \"react-md/lib/Cards\";\nimport CardText from \"react-md/lib/Cards/CardText\";\nimport Layout from \"../layout\";\nimport UserInfo from \"../components/UserInfo\";\nimport Disqus from \"../components/Disqus\";\nimport PostTags from \"../components/PostTags\";\nimport PostCover from \"../components/PostCover\";\nimport PostInfo from \"../components/PostInfo\";\nimport SocialLinks from \"../components/SocialLinks\";\nimport PostSuggestions from \"../components/PostSuggestions\";\nimport SEO from \"../components/SEO\";\nimport config from \"../../data/SiteConfig\";\nimport \"./b16-tomorrow-dark.css\";\nimport \"./post.scss\";\n\nexport default class PostTemplate extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mobile: true\n    };\n    this.handleResize = this.handleResize.bind(this);\n  }\n  componentDidMount() {\n    this.handleResize();\n    window.addEventListener(\"resize\", this.handleResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleResize);\n  }\n\n  handleResize() {\n    if (window.innerWidth >= 640) {\n      this.setState({ mobile: false });\n    } else {\n      this.setState({ mobile: true });\n    }\n  }\n\n  render() {\n    const { mobile } = this.state;\n    const { slug } = this.props.pageContext;\n    const expanded = !mobile;\n    const postOverlapClass = mobile ? \"post-overlap-mobile\" : \"post-overlap\";\n    const postNode = this.props.data.markdownRemark;\n    const post = postNode.frontmatter;\n    if (!post.id) {\n      post.id = slug;\n    }\n    if (!post.category_id) {\n      post.category_id = config.postDefaultCategoryID;\n    }\n\n    const coverHeight = mobile ? 180 : 350;\n    return (\n      <Layout location={this.props.location}>\n        <div className=\"post-page md-grid md-grid--no-spacing\">\n          <Helmet>\n            <title>{`${post.title} | ${config.siteTitle}`}</title>\n            <link rel=\"canonical\" href={`${config.siteUrl}${post.id}`} />\n          </Helmet>\n          <SEO postPath={slug} postNode={postNode} postSEO />\n          <PostCover\n            postNode={postNode}\n            coverHeight={coverHeight}\n            coverClassName=\"md-grid md-cell--9 post-cover\"\n          />\n          <div\n            className={`md-grid md-cell--9 post-page-contents mobile-fix ${postOverlapClass}`}\n          >\n            <Card className=\"md-grid md-cell md-cell--12 post\">\n              <CardText className=\"post-body\">\n                <h1 className=\"md-display-2 post-header\">{post.title}</h1>\n                <PostInfo postNode={postNode} />\n                <div dangerouslySetInnerHTML={{ __html: postNode.html }} />\n              </CardText>\n              <div className=\"post-meta\">\n                <PostTags tags={post.tags} />\n                <SocialLinks\n                  postPath={slug}\n                  postNode={postNode}\n                  mobile={this.state.mobile}\n                />\n              </div>\n            </Card>\n            {/* <UserInfo\n              className=\"md-grid md-cell md-cell--12\"\n              config={config}\n              expanded={expanded}\n            />\n            <Disqus postNode={postNode} expanded={expanded} /> */}\n          </div>\n\n          {/* <PostSuggestions postNode={postNode} /> */}\n        </div>\n      </Layout>\n    );\n  }\n}\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      timeToRead\n      excerpt\n      frontmatter {\n        title\n        cover\n        date\n        category\n        tags\n      }\n    }\n  }\n`;\n","import React, { Component } from \"react\";\nimport Helmet from \"react-helmet\";\nimport urljoin from \"url-join\";\nimport config from \"../../../data/SiteConfig\";\n\nclass SEO extends Component {\n  render() {\n    const { postNode, postPath, postSEO } = this.props;\n    let title;\n    let description;\n    let image;\n    let postURL;\n    if (postSEO) {\n      const postMeta = postNode.frontmatter;\n      ({ title } = postMeta);\n      description = postMeta.description\n        ? postMeta.description\n        : postNode.excerpt;\n      image = postMeta.cover;\n      postURL = urljoin(config.siteUrl, config.pathPrefix, postPath);\n    } else {\n      title = config.siteTitle;\n      description = config.siteDescription;\n      image = config.siteLogo;\n    }\n    image = urljoin(config.siteUrl, config.pathPrefix, image);\n    const blogURL = urljoin(config.siteUrl, config.pathPrefix);\n    const schemaOrgJSONLD = [\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"WebSite\",\n        url: blogURL,\n        name: title,\n        alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\"\n      }\n    ];\n    if (postSEO) {\n      schemaOrgJSONLD.push([\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          itemListElement: [\n            {\n              \"@type\": \"ListItem\",\n              position: 1,\n              item: {\n                \"@id\": postURL,\n                name: title,\n                image\n              }\n            }\n          ]\n        },\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BlogPosting\",\n          url: blogURL,\n          name: title,\n          alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\",\n          headline: title,\n          image: {\n            \"@type\": \"ImageObject\",\n            url: image\n          },\n          description\n        }\n      ]);\n    }\n    return (\n      <Helmet>\n        {/* General tags */}\n        <meta name=\"description\" content={description} />\n        <meta name=\"image\" content={image} />\n\n        {/* Schema.org tags */}\n        <script type=\"application/ld+json\">\n          {JSON.stringify(schemaOrgJSONLD)}\n        </script>\n\n        {/* OpenGraph tags */}\n        <meta property=\"og:url\" content={postSEO ? postURL : blogURL} />\n        {postSEO ? <meta property=\"og:type\" content=\"article\" /> : null}\n        <meta property=\"og:title\" content={title} />\n        <meta property=\"og:description\" content={description} />\n        <meta property=\"og:image\" content={image} />\n        <meta\n          property=\"fb:app_id\"\n          content={config.siteFBAppID ? config.siteFBAppID : \"\"}\n        />\n\n        {/* Twitter Card tags */}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta\n          name=\"twitter:creator\"\n          content={config.userTwitter ? config.userTwitter : \"\"}\n        />\n        <meta name=\"twitter:title\" content={title} />\n        <meta name=\"twitter:description\" content={description} />\n        <meta name=\"twitter:image\" content={image} />\n      </Helmet>\n    );\n  }\n}\n\nexport default SEO;\n","import React, { Component } from \"react\";\nimport _ from \"lodash\";\nimport { Link } from \"gatsby\";\nimport Chip from \"react-md/lib/Chips\";\nimport \"./PostTags.scss\";\n\nclass PostTags extends Component {\n  render() {\n    const { tags } = this.props;\n    return (\n      <div className=\"post-tag-container\">\n        {tags &&\n          tags.map(tag => (\n            <Link\n              key={tag}\n              style={{ textDecoration: \"none\" }}\n              to={`/tags/${_.kebabCase(tag)}`}\n            >\n              <Chip label={tag} className=\"post-preview-tags\" />\n            </Link>\n          ))}\n      </div>\n    );\n  }\n}\n\nexport default PostTags;\n","import React, { Component } from \"react\";\nimport Img from \"gatsby-image\";\nimport path from \"path\";\nimport \"./PostCover.scss\";\n\nclass PostCover extends Component {\n  render() {\n    const { fileEdges, postNode, coverHeight, coverClassName } = this.props;\n    const post = postNode.frontmatter ? postNode.frontmatter : postNode;\n    const coverNodeList = fileEdges.filter(fileNode => {\n      if (fileNode.node.childImageSharp === null) return false;\n\n      if (\n        fileNode.node.absolutePath.indexOf(\n          path.join(\"/static/assets/\", post.cover)\n        ) !== -1\n      )\n        return true;\n\n      return false;\n    });\n\n    if (coverNodeList.length === 1) {\n      return (\n        <Img\n          fluid={coverNodeList[0].node.childImageSharp.fluid}\n          outerWrapperClassName={coverClassName}\n          style={{ height: coverHeight, width: \"100%\" }}\n        />\n      );\n    }\n\n    /* eslint no-undef: \"off\" */\n    const coverURL =\n      post.cover.substring(0, 1) === \"/\"\n        ? __PATH_PREFIX__ + post.cover\n        : post.cover;\n    return (\n      <div\n        style={{\n          backgroundImage: `url(${coverURL})`,\n          height: `${coverHeight}px`\n        }}\n        className={coverClassName}\n      />\n    );\n  }\n}\n\nexport default PostCover;\n","import React, { Component } from \"react\";\nimport { StaticQuery, graphql } from \"gatsby\";\nimport PostCover from \"./PostCoverComponent\";\n\nclass queryWrapper extends Component {\n  render() {\n    const { postNode, coverHeight, coverClassName } = this.props;\n    return (\n      <StaticQuery\n        query={graphql`\n          query CoverQuery {\n            allFile {\n              edges {\n                node {\n                  id\n                  absolutePath\n                  childImageSharp {\n                    id\n                    resolutions {\n                      base64\n                      tracedSVG\n                      aspectRatio\n                      width\n                      height\n                      src\n                      srcSet\n                      srcWebp\n                      srcSetWebp\n                      originalName\n                    }\n                    internal {\n                      contentDigest\n                      type\n                      owner\n                    }\n                    fluid(maxWidth: 1240) {\n                      ...GatsbyImageSharpFluid\n                      originalName\n                    }\n                  }\n                }\n              }\n            }\n          }\n        `}\n\n        \n        render={data => (\n          <PostCover\n            fileEdges={data.allFile.edges}\n            postNode={postNode}\n            coverHeight={coverHeight}\n            coverClassName={coverClassName}\n          />\n        )}\n      />\n    );\n  }\n}\n\nexport default queryWrapper;\n"],"sourceRoot":""}