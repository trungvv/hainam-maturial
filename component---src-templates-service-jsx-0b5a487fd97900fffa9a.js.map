{"version":3,"sources":["webpack:///./src/templates/service.jsx","webpack:///./src/components/PostCover/PostCoverComponent.jsx","webpack:///./src/components/PostCover/index.jsx","webpack:///./src/components/SEO/index.jsx","webpack:///./src/components/PostTags/index.jsx","webpack:///./src/components/PostInfo/index.jsx","webpack:///./src/components/SocialLinks/index.jsx"],"names":["ServiceTemplate","props","_this","_React$Component","call","this","state","mobile","handleResize","bind","_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_1___default","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","innerWidth","setState","render","slug","pageContext","postNode","data","markdownRemark","post","frontmatter","id","category_id","config","postDefaultCategoryID","coverHeight","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","_layout__WEBPACK_IMPORTED_MODULE_4__","location","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","title","siteTitle","rel","href","siteUrl","type","_components_SEO__WEBPACK_IMPORTED_MODULE_9__","postPath","postSEO","className","_components_PostInfo__WEBPACK_IMPORTED_MODULE_7__","_components_PostCover__WEBPACK_IMPORTED_MODULE_6__","dangerouslySetInnerHTML","__html","html","_components_PostTags__WEBPACK_IMPORTED_MODULE_5__","tags","_components_SocialLinks__WEBPACK_IMPORTED_MODULE_8__","React","Component","pageQuery","PostCover","_this$props","fileEdges","coverClassName","coverNodeList","filter","fileNode","node","childImageSharp","absolutePath","indexOf","path","join","cover","length","react_default","gatsby_image_default","fluid","outerWrapperClassName","style","height","width","coverURL","substring","__PATH_PREFIX__","backgroundImage","queryWrapper","gatsby_browser_entry","query","PostCoverComponent","allFile","edges","_4118773653","SEO","description","image","postURL","postMeta","excerpt","urljoin","siteDescription","siteLogo","blogURL","schemaOrgJSONLD","@context","@type","url","name","alternateName","siteTitleAlt","push","itemListElement","position","item","@id","headline","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","content","JSON","stringify","property","siteFBAppID","userTwitter","PostTags","map","tag","gatsby__WEBPACK_IMPORTED_MODULE_3__","key","textDecoration","to","lodash_kebabCase__WEBPACK_IMPORTED_MODULE_1___default","PostInfo","moment","date","format","dateFormat","templateKey","category","SocialLinks","iconSize","react_share__WEBPACK_IMPORTED_MODULE_2__","quote","react_share__WEBPACK_IMPORTED_MODULE_3__","round","size","react_share__WEBPACK_IMPORTED_MODULE_4__","count","renderShareCount"],"mappings":"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","file":"component---src-templates-service-jsx-0b5a487fd97900fffa9a.js","sourcesContent":["import React from \"react\";\nimport Helmet from \"react-helmet\";\nimport { graphql } from \"gatsby\";\nimport Layout from \"../layout\";\nimport PostTags from \"../components/PostTags\";\nimport PostCover from \"../components/PostCover\";\nimport PostInfo from \"../components/PostInfo\";\nimport SocialLinks from \"../components/SocialLinks\";\nimport SEO from \"../components/SEO\";\nimport config from \"../../data/SiteConfig\";\nimport \"./post.scss\";\n\nexport default class ServiceTemplate extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mobile: true\n    };\n    this.handleResize = this.handleResize.bind(this);\n  }\n  componentDidMount() {\n    this.handleResize();\n    window.addEventListener(\"resize\", this.handleResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleResize);\n  }\n\n  handleResize() {\n    if (window.innerWidth >= 640) {\n      this.setState({ mobile: false });\n    } else {\n      this.setState({ mobile: true });\n    }\n  }\n\n  render() {\n    const { mobile } = this.state;\n    const { slug } = this.props.pageContext;\n    const expanded = !mobile;\n    const postOverlapClass = mobile ? \"post-overlap-mobile\" : \"post-overlap\";\n    const postNode = this.props.data.markdownRemark;\n    const post = postNode.frontmatter;\n    if (!post.id) {\n      post.id = slug;\n    }\n    if (!post.category_id) {\n      post.category_id = config.postDefaultCategoryID;\n    }\n\n    const coverHeight = mobile ? 180 : 350;\n    return (\n      <Layout location={this.props.location}>\n        {/* <div className=\"post-page md-grid md-grid--no-spacing\"> */}\n          <Helmet>\n            <title>{`${post.title} | ${config.siteTitle}`}</title>\n            <link rel=\"canonical\" href={`${config.siteUrl}${post.id}`} />\n            <link href=\"/logos/favicon.ico\" rel=\"icon\" type=\"image/x-icon\" />\n          </Helmet>\n          <SEO postPath={slug} postNode={postNode} postSEO />\n          <header className=\"business-header\">\n            <div className=\"container-fluid\">\n              <div className=\"row container\">\n                <div className=\"col-lg-12\">\n                  <h1 className=\"display-3 text-center text-white mt-4\">{post.title}</h1>\n                </div>\n              </div>\n            </div>\n          </header>\n        \n        <div className=\"row container mt-4 mb-4\">\n          {/* Post Content Column */}\n          <div className=\"col-lg-12\">\n\n          <div className=\"col-lg-8\">\n            <h1 className=\"\">{post.title}</h1>\n            <PostInfo postNode={postNode} />\n            <PostCover\n                  postNode={postNode}\n                  coverHeight={coverHeight}\n                />\n            <div dangerouslySetInnerHTML={{ __html: postNode.html }} />\n            <hr/>\n            <div className=\"row\">\n                <PostTags tags={post.tags} className=\"col\" />\n                <SocialLinks\n                  postPath={slug}\n                  postNode={postNode}\n                  mobile={this.state.mobile}\n                  className=\"col\"\n                />\n            </div>\n          </div>\n\n          </div>\n          {/* <PostSuggestions postNode={postNode} /> */}\n        </div>\n\n      </Layout>\n    );\n  }\n}\n\nexport const pageQuery = graphql`\n  query ServiceBySlug($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      timeToRead\n      excerpt\n      frontmatter {\n        title\n        shortDesc\n        cover\n        date\n        category\n        tags\n        templateKey\n      }\n    }\n  }\n`;\n","import React, { Component } from \"react\";\nimport Img from \"gatsby-image\";\nimport path from \"path\";\nimport \"./PostCover.scss\";\n\nclass PostCover extends Component {\n  render() {\n    const { fileEdges, postNode, coverHeight, coverClassName } = this.props;\n    const post = postNode.frontmatter ? postNode.frontmatter : postNode;\n    const coverNodeList = fileEdges.filter(fileNode => {\n      if (fileNode.node.childImageSharp === null) return false;\n\n      if ((\n        fileNode.node.absolutePath.indexOf(\n          path.join(\"/static/assets/\", post.cover)\n        ) !== -1\n      ) \n      || (fileNode.node.absolutePath.indexOf(post.cover) !== -1)\n      )\n        return true;\n\n      return false;\n    });\n\n    if (coverNodeList.length === 1) {\n      return (\n        <Img\n          fluid={coverNodeList[0].node.childImageSharp.fluid}\n          outerWrapperClassName={coverClassName}\n          style={{ height: coverHeight, width: \"100%\" }}\n        />\n      );\n    }\n\n    /* eslint no-undef: \"off\" */\n    const coverURL =\n      post.cover.substring(0, 1) === \"/\"\n        ? __PATH_PREFIX__ + post.cover\n        : post.cover;\n    return (\n      <div\n        style={{\n          backgroundImage: `url(${coverURL})`,\n          height: `${coverHeight}px`\n        }}\n        className={coverClassName}\n      />\n    );\n  }\n}\n\nexport default PostCover;\n","import React, { Component } from \"react\";\nimport { StaticQuery, graphql } from \"gatsby\";\nimport PostCover from \"./PostCoverComponent\";\n\nclass queryWrapper extends Component {\n  render() {\n    const { postNode, coverHeight, coverClassName } = this.props;\n    return (\n      <StaticQuery\n        query={graphql`\n          query CoverQuery {\n            allFile {\n              edges {\n                node {\n                  id\n                  absolutePath\n                  childImageSharp {\n                    id\n                    resolutions {\n                      base64\n                      tracedSVG\n                      aspectRatio\n                      width\n                      height\n                      src\n                      srcSet\n                      srcWebp\n                      srcSetWebp\n                      originalName\n                    }\n                    internal {\n                      contentDigest\n                      type\n                      owner\n                    }\n                    fluid(maxWidth: 2568) {\n                      ...GatsbyImageSharpFluid\n                      originalName\n                    }\n                  }\n                }\n              }\n            }\n          }\n        `}\n\n        \n        render={data => (\n          <PostCover\n            fileEdges={data.allFile.edges}\n            postNode={postNode}\n            coverHeight={coverHeight}\n            coverClassName={coverClassName}\n          />\n        )}\n      />\n    );\n  }\n}\n\nexport default queryWrapper;\n","import React, { Component } from \"react\";\nimport Helmet from \"react-helmet\";\nimport urljoin from \"url-join\";\nimport config from \"../../../data/SiteConfig\";\n\nclass SEO extends Component {\n  render() {\n    const { postNode, postPath, postSEO } = this.props;\n    let title;\n    let description;\n    let image;\n    let postURL;\n    if (postSEO) {\n      const postMeta = postNode.frontmatter;\n      ({ title } = postMeta);\n      description = postMeta.description\n        ? postMeta.description\n        : postNode.excerpt;\n      // image = postMeta.cover;\n      // postURL = urljoin(config.siteUrl, config.pathPrefix, postPath);\n      image = urljoin(config.siteUrl, \"/assets\", postMeta.cover);\n      postURL = urljoin(config.siteUrl, postPath);\n    } else {\n      title = config.siteTitle;\n      description = config.siteDescription;\n      // image = config.siteLogo;\n      image = urljoin(config.siteUrl, config.siteLogo);\n    }\n    // image = urljoin(config.siteUrl, \"/assets\", image);\n    // const blogURL = urljoin(config.siteUrl, config.pathPrefix);\n\n    const blogURL = config.siteUrl;\n    const schemaOrgJSONLD = [\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"WebSite\",\n        url: blogURL,\n        name: title,\n        alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\"\n      }\n    ];\n    if (postSEO) {\n      schemaOrgJSONLD.push([\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          itemListElement: [\n            {\n              \"@type\": \"ListItem\",\n              position: 1,\n              item: {\n                \"@id\": postURL,\n                name: title,\n                image\n              }\n            }\n          ]\n        },\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BlogPosting\",\n          url: blogURL,\n          name: title,\n          alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\",\n          headline: title,\n          image: {\n            \"@type\": \"ImageObject\",\n            url: image\n          },\n          description\n        }\n      ]);\n    }\n    return (\n      <Helmet>\n        {/* General tags */}\n        <meta name=\"description\" content={description} />\n        <meta name=\"image\" content={image} />\n\n        {/* Schema.org tags */}\n        <script type=\"application/ld+json\">\n          {JSON.stringify(schemaOrgJSONLD)}\n        </script>\n\n        {/* OpenGraph tags */}\n        <meta property=\"og:url\" content={postSEO ? postURL : blogURL} />\n        {postSEO ? <meta property=\"og:type\" content=\"article\" /> : null}\n        <meta property=\"og:title\" content={title} />\n        <meta property=\"og:description\" content={description} />\n        <meta property=\"og:image\" content={image} />\n        <meta\n          property=\"fb:app_id\"\n          content={config.siteFBAppID ? config.siteFBAppID : \"\"}\n        />\n\n        {/* Twitter Card tags */}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta\n          name=\"twitter:creator\"\n          content={config.userTwitter ? config.userTwitter : \"\"}\n        />\n        <meta name=\"twitter:title\" content={title} />\n        <meta name=\"twitter:description\" content={description} />\n        <meta name=\"twitter:image\" content={image} />\n      </Helmet>\n    );\n  }\n}\n\nexport default SEO;\n","import React, { Component } from \"react\";\nimport _ from \"lodash\";\nimport { Link } from \"gatsby\";\nimport \"./PostTags.scss\";\n\nclass PostTags extends Component {\n  render() {\n    const { tags } = this.props;\n    return (\n      <div className=\"col social-links\">\n        <mini>Tags: </mini> {tags &&\n          tags.map(tag => (\n            <Link\n              key={tag}\n              style={{ textDecoration: \"none\" }}\n              to={`/tags/${_.kebabCase(tag)}`}\n            >\n            <span className=\"badge badge-pill badge-light border\">{tag}</span>\n              {/* <Chip label={tag} className=\"post-preview-tags\" /> */}\n            </Link>\n          ))}\n      </div>\n    );\n  }\n}\n\nexport default PostTags;\n","import React, { Component } from \"react\";\nimport { Link } from \"gatsby\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\nimport config from \"../../../data/SiteConfig\";\nimport \"./PostInfo.scss\";\n\nclass PostInfo extends Component {\n  render() {\n    const { postNode } = this.props;\n    const post = postNode.frontmatter;\n    return (\n      <div className=\"row\">\n        <div className=\"col\">\n        {`${moment(postNode.frontmatter.date).format(\n            config.dateFormat\n          )}`}\n        </div>\n        <div className=\"col\">\n        <Link\n          className=\"category-link\"\n          // to={`/hainamer/${_.kebabCase(post.category)}`}\n          to={`/${post.templateKey}/${_.kebabCase(post.category)}`}\n        >\n          {post.category}\n        </Link>\n        </div>\n      </div>\n     \n    );\n  }\n}\n\nexport default PostInfo;\n","import React, { Component } from \"react\";\nimport {\n  FacebookShareButton,\n  FacebookShareCount,\n  FacebookIcon,\n\n} from \"react-share\";\nimport urljoin from \"url-join\";\nimport config from \"../../../data/SiteConfig\";\nimport \"./SocialLinks.scss\";\n\nclass SocialLinks extends Component {\n  render() {\n    const { postNode, postPath, mobile } = this.props;\n    // const url = urljoin(config.siteUrl, config.pathPrefix, postPath);\n    const url = urljoin(config.siteUrl, postPath);\n    const iconSize = mobile ? 36 : 48;\n    const filter = count => (count > 0 ? count : \"\");\n    const renderShareCount = count => (\n      <div className=\"share-count\">{filter(count)}</div>\n    );\n\n    return (\n      <div className=\"social-links col\">Share: \n        <FacebookShareButton url={url} quote={postNode.excerpt}>\n          <FacebookIcon round size={iconSize} />\n          <FacebookShareCount url={url}>\n            {count => renderShareCount(count)}\n          </FacebookShareCount>\n        </FacebookShareButton>\n      </div>\n    );\n  }\n}\n\nexport default SocialLinks;\n"],"sourceRoot":""}