{"version":3,"sources":["webpack:///./src/components/Banner/index.js","webpack:///./src/pages/index.jsx","webpack:///./src/components/SEO/index.jsx","webpack:///./src/components/PostTags/index.jsx","webpack:///./src/components/PostPreview/index.jsx","webpack:///./src/components/PostListing/index.jsx","webpack:///./src/components/PostCover/PostCoverComponent.jsx","webpack:///./src/components/PostCover/index.jsx"],"names":["Banner","render","slides","this","props","bannerImage","map","item","react_default","a","createElement","className","key","id","src","image","alt","imageAlt","lib_default","Object","assign","dots","infinite","speed","slidesToShow","slidesToScroll","Component","Index","console","log","data","allMarkdownRemark","edges","node","frontmatter","layout","location","title","Helmet_default","config","siteTitle","rel","href","siteUrl","components_Banner","React","homepageQuery","SEO","description","postURL","_this$props","postNode","postPath","postSEO","postMeta","excerpt","cover","urljoin","pathPrefix","siteDescription","siteLogo","blogURL","schemaOrgJSONLD","@context","@type","url","name","alternateName","siteTitleAlt","push","itemListElement","position","@id","headline","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","content","type","JSON","stringify","property","siteFBAppID","userTwitter","PostTags","tags","react__WEBPACK_IMPORTED_MODULE_2___default","tag","gatsby__WEBPACK_IMPORTED_MODULE_3__","style","textDecoration","to","lodash_kebabCase__WEBPACK_IMPORTED_MODULE_1___default","react_md_lib_Chips__WEBPACK_IMPORTED_MODULE_4___default","label","PostPreview","_this","_Component","call","state","mobile","handleResize","bind","assertThisInitialized_default","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","innerWidth","setState","postInfo","expand","coverHeight","Card_default","path","raise","gatsby_browser_entry","Media_default","height","paddingBottom","PostCover","Media","CardTitle_default","Buttons_default","raised","secondary","expander","avatar","Avatars_default","icon","FontIcons_default","iconClassName","moment","date","format","dateFormat","subtitle","timeToRead","CardText_default","expandable","PostListing","getPostList","postList","postEdges","forEach","postEdge","fields","slug","post","components_PostPreview","fileEdges","coverClassName","coverNodeList","filter","fileNode","childImageSharp","absolutePath","indexOf","join","length","gatsby_image_default","fluid","outerWrapperClassName","width","coverURL","substring","__PATH_PREFIX__","backgroundImage","queryWrapper","query","PostCoverComponent","allFile","_590853412"],"mappings":"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","file":"component---src-pages-index-jsx-008c19512de704789c5b.js","sourcesContent":["import React, { Component } from 'react'\nimport Slider from 'react-slick'\n// import { withNamespaces } from 'react-i18next'\nimport { Link } from 'gatsby'\nimport 'slick-carousel/slick/slick.css'\nimport 'slick-carousel/slick/slick-theme.css'\nimport './style.scss'\n\n// const items = [\n//   {\n//     id: 1,\n//     image:\n//       'https://scontent.fdad3-1.fna.fbcdn.net/v/t1.0-9/42660512_749028275480279_8399454433099907072_o.jpg?_nc_cat=110&_nc_ht=scontent.fdad3-1.fna&oh=58270b6d574314d704b4a0de7b755379&oe=5CA5B99A',\n//     imageAlt: 'Slide 1',\n//     linkType: 'Slide 1',\n//   },\n//   {\n//     id: 2,\n//     image:\n//       'https://scontent.fdad3-2.fna.fbcdn.net/v/t1.0-9/41006969_737700396613067_5465604080413966336_o.jpg?_nc_cat=107&_nc_ht=scontent.fdad3-2.fna&oh=1abbf4c03a71ae0a7c31b2a690ba112e&oe=5CA6F3AF',\n//     imageAlt: 'Slide 2',\n//     linkType: 'Slide 2',\n//   },\n//   {\n//     id: 3,\n//     image:\n//       'https://scontent.fdad3-1.fna.fbcdn.net/v/t1.0-9/40141616_732633677119739_3246191322322698240_n.jpg?_nc_cat=106&_nc_ht=scontent.fdad3-1.fna&oh=e2267832c00d98f9b716853f1c40d7b2&oe=5CD7EC29',\n//     imageAlt: 'Slide 3',\n//     linkType: 'Slide 3',\n//   },\n// ]\n\nclass Banner extends Component {\n  render() {\n    const settings = {\n      dots: false,\n      infinite: true,\n      speed: 500,\n      slidesToShow: 1,\n      slidesToScroll: 1,\n    }\n    const items = this.props.bannerImage.bannerImage;\n    // console.log(items);\n    const slides = items.map(item => {\n      return (\n          <div className=\"custom-banner\" key={item.id}>\n            <img className=\"card-img-top\" src={item.image} alt={item.imageAlt} />\n          </div>\n\n      )\n    })\n\n    return (\n      // <div className=\"jumbotron bg-light mb-0\">\n      <div className=\"container-fluid\"> \n        <Slider {...settings} className=\"row\">\n          {slides}\n        </Slider>\n        {/* </div> */}\n      </div>\n    )\n  }\n}\n\n// export default withNamespaces('translation')(Banner)\nexport default Banner\n","import React from \"react\";\nimport Helmet from \"react-helmet\";\nimport { graphql } from \"gatsby\";\nimport Layout from \"../layout\";\nimport PostListing from \"../components/PostListing\";\nimport SEO from \"../components/SEO\";\nimport config from \"../../data/SiteConfig\";\nimport Banner from \"../components/Banner\"\n\nclass Index extends React.Component {\n  render() {\n    console.log(this.props.data.allMarkdownRemark)\n    const { frontmatter: bannerImage } = this.props.data.allMarkdownRemark.edges[0].node;\n    return (\n      <Layout location={this.props.location} title=\"Home\">\n        <div className=\"index-container\">\n          <Helmet>\n            <title>{config.siteTitle}</title>\n            <link rel=\"canonical\" href={`${config.siteUrl}`} />\n          </Helmet>\n          {/* <SEO postEdges={postEdges} /> */}\n          {/* <PostListing postEdges={postEdges} /> */}\n\n          <Banner bannerImage={bannerImage}/>\n        </div>\n      </Layout>\n    );\n  }\n}\n\nexport default Index;\n\nexport const homepageQuery = graphql`\nquery homePageData {\n\tallMarkdownRemark (\n    filter: { frontmatter: { templateKey: {eq: \"home-page\" }}}\n  ) {\n    edges {\n      node {\n        frontmatter {\n          title\n          templateKey\n          bannerImage {\n            id\n            image\n            imageAlt\n            linkType\n            linkURL\n          }\n          seo {\n            browserTitle\n            description\n            title\n          }\n        }\n      }\n    }\n  }\n}`;","import React, { Component } from \"react\";\nimport Helmet from \"react-helmet\";\nimport urljoin from \"url-join\";\nimport config from \"../../../data/SiteConfig\";\n\nclass SEO extends Component {\n  render() {\n    const { postNode, postPath, postSEO } = this.props;\n    let title;\n    let description;\n    let image;\n    let postURL;\n    if (postSEO) {\n      const postMeta = postNode.frontmatter;\n      ({ title } = postMeta);\n      description = postMeta.description\n        ? postMeta.description\n        : postNode.excerpt;\n      image = postMeta.cover;\n      postURL = urljoin(config.siteUrl, config.pathPrefix, postPath);\n    } else {\n      title = config.siteTitle;\n      description = config.siteDescription;\n      image = config.siteLogo;\n    }\n    image = urljoin(config.siteUrl, config.pathPrefix, image);\n    const blogURL = urljoin(config.siteUrl, config.pathPrefix);\n    const schemaOrgJSONLD = [\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"WebSite\",\n        url: blogURL,\n        name: title,\n        alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\"\n      }\n    ];\n    if (postSEO) {\n      schemaOrgJSONLD.push([\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          itemListElement: [\n            {\n              \"@type\": \"ListItem\",\n              position: 1,\n              item: {\n                \"@id\": postURL,\n                name: title,\n                image\n              }\n            }\n          ]\n        },\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BlogPosting\",\n          url: blogURL,\n          name: title,\n          alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\",\n          headline: title,\n          image: {\n            \"@type\": \"ImageObject\",\n            url: image\n          },\n          description\n        }\n      ]);\n    }\n    return (\n      <Helmet>\n        {/* General tags */}\n        <meta name=\"description\" content={description} />\n        <meta name=\"image\" content={image} />\n\n        {/* Schema.org tags */}\n        <script type=\"application/ld+json\">\n          {JSON.stringify(schemaOrgJSONLD)}\n        </script>\n\n        {/* OpenGraph tags */}\n        <meta property=\"og:url\" content={postSEO ? postURL : blogURL} />\n        {postSEO ? <meta property=\"og:type\" content=\"article\" /> : null}\n        <meta property=\"og:title\" content={title} />\n        <meta property=\"og:description\" content={description} />\n        <meta property=\"og:image\" content={image} />\n        <meta\n          property=\"fb:app_id\"\n          content={config.siteFBAppID ? config.siteFBAppID : \"\"}\n        />\n\n        {/* Twitter Card tags */}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta\n          name=\"twitter:creator\"\n          content={config.userTwitter ? config.userTwitter : \"\"}\n        />\n        <meta name=\"twitter:title\" content={title} />\n        <meta name=\"twitter:description\" content={description} />\n        <meta name=\"twitter:image\" content={image} />\n      </Helmet>\n    );\n  }\n}\n\nexport default SEO;\n","import React, { Component } from \"react\";\nimport _ from \"lodash\";\nimport { Link } from \"gatsby\";\nimport Chip from \"react-md/lib/Chips\";\nimport \"./PostTags.scss\";\n\nclass PostTags extends Component {\n  render() {\n    const { tags } = this.props;\n    return (\n      <div className=\"post-tag-container\">\n        {tags &&\n          tags.map(tag => (\n            <Link\n              key={tag}\n              style={{ textDecoration: \"none\" }}\n              to={`/tags/${_.kebabCase(tag)}`}\n            >\n              <Chip label={tag} className=\"post-preview-tags\" />\n            </Link>\n          ))}\n      </div>\n    );\n  }\n}\n\nexport default PostTags;\n","import React, { Component } from \"react\";\nimport Card from \"react-md/lib/Cards/Card\";\nimport CardTitle from \"react-md/lib/Cards/CardTitle\";\nimport Button from \"react-md/lib/Buttons\";\nimport Avatar from \"react-md/lib/Avatars\";\nimport CardText from \"react-md/lib/Cards/CardText\";\nimport FontIcon from \"react-md/lib/FontIcons\";\nimport { Link } from \"gatsby\";\nimport moment from \"moment\";\nimport Media, { MediaOverlay } from \"react-md/lib/Media\";\nimport PostTags from \"../PostTags\";\nimport PostCover from \"../PostCover\";\nimport config from \"../../../data/SiteConfig\";\nimport \"./PostPreview.scss\";\n\nclass PostPreview extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mobile: true\n    };\n    this.handleResize = this.handleResize.bind(this);\n  }\n  componentDidMount() {\n    this.handleResize();\n    window.addEventListener(\"resize\", this.handleResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleResize);\n  }\n\n  handleResize() {\n    if (window.innerWidth >= 640) {\n      this.setState({ mobile: false });\n    } else {\n      this.setState({ mobile: true });\n    }\n  }\n  render() {\n    const { postInfo } = this.props;\n    const { mobile } = this.state;\n    const expand = mobile;\n    /* eslint no-undef: \"off\" */\n    const coverHeight = mobile ? 162 : 225;\n    return (\n      <Card key={postInfo.path} raise className=\"md-grid md-cell md-cell--12\">\n        <Link style={{ textDecoration: \"none\" }} to={postInfo.path}>\n          <Media style={{ height: coverHeight, paddingBottom: \"0px\" }}>\n            <PostCover postNode={postInfo} coverHeight={coverHeight} />\n            <MediaOverlay>\n              <CardTitle title={postInfo.title}>\n                <Button raised secondary className=\"md-cell--right\">\n                  Read\n                </Button>\n              </CardTitle>\n            </MediaOverlay>\n          </Media>\n        </Link>\n        <CardTitle\n          expander={expand}\n          avatar={<Avatar icon={<FontIcon iconClassName=\"fa fa-calendar\" />} />}\n          title={`Published on ${moment(postInfo.date).format(\n            config.dateFormat\n          )}`}\n          subtitle={`${postInfo.timeToRead} min read`}\n        />\n\n        <CardText expandable={expand}>\n          {postInfo.excerpt}\n          <PostTags tags={postInfo.tags} />\n        </CardText>\n      </Card>\n    );\n  }\n}\n\nexport default PostPreview;\n","import React from \"react\";\nimport PostPreview from \"../PostPreview\";\n\nclass PostListing extends React.Component {\n  getPostList() {\n    const postList = [];\n    this.props.postEdges.forEach(postEdge => {\n      postList.push({\n        path: postEdge.node.fields.slug,\n        tags: postEdge.node.frontmatter.tags,\n        cover: postEdge.node.frontmatter.cover,\n        title: postEdge.node.frontmatter.title,\n        date: postEdge.node.fields.date,\n        excerpt: postEdge.node.excerpt,\n        timeToRead: postEdge.node.timeToRead\n      });\n    });\n    return postList;\n  }\n  render() {\n    const postList = this.getPostList();\n    return (\n      <div className=\"md-grid md-grid--no-spacing md-cell--middle\">\n        <div className=\"md-grid md-cell--8 mobile-fix\">\n          {postList.map(post => (\n            <PostPreview key={post.title} postInfo={post} />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PostListing;\n","import React, { Component } from \"react\";\nimport Img from \"gatsby-image\";\nimport path from \"path\";\nimport \"./PostCover.scss\";\n\nclass PostCover extends Component {\n  render() {\n    const { fileEdges, postNode, coverHeight, coverClassName } = this.props;\n    const post = postNode.frontmatter ? postNode.frontmatter : postNode;\n    const coverNodeList = fileEdges.filter(fileNode => {\n      if (fileNode.node.childImageSharp === null) return false;\n\n      if (\n        fileNode.node.absolutePath.indexOf(\n          path.join(\"/static/assets/\", post.cover)\n        ) !== -1\n      )\n        return true;\n\n      return false;\n    });\n\n    if (coverNodeList.length === 1) {\n      return (\n        <Img\n          fluid={coverNodeList[0].node.childImageSharp.fluid}\n          outerWrapperClassName={coverClassName}\n          style={{ height: coverHeight, width: \"100%\" }}\n        />\n      );\n    }\n\n    /* eslint no-undef: \"off\" */\n    const coverURL =\n      post.cover.substring(0, 1) === \"/\"\n        ? __PATH_PREFIX__ + post.cover\n        : post.cover;\n    return (\n      <div\n        style={{\n          backgroundImage: `url(${coverURL})`,\n          height: `${coverHeight}px`\n        }}\n        className={coverClassName}\n      />\n    );\n  }\n}\n\nexport default PostCover;\n","import React, { Component } from \"react\";\nimport { StaticQuery, graphql } from \"gatsby\";\nimport PostCover from \"./PostCoverComponent\";\n\nclass queryWrapper extends Component {\n  render() {\n    const { postNode, coverHeight, coverClassName } = this.props;\n    return (\n      <StaticQuery\n        query={graphql`\n          query CoverQuery {\n            allFile {\n              edges {\n                node {\n                  id\n                  absolutePath\n                  childImageSharp {\n                    id\n                    resolutions {\n                      base64\n                      tracedSVG\n                      aspectRatio\n                      width\n                      height\n                      src\n                      srcSet\n                      srcWebp\n                      srcSetWebp\n                      originalName\n                    }\n                    internal {\n                      contentDigest\n                      type\n                      owner\n                    }\n                    fluid(maxWidth: 1240) {\n                      ...GatsbyImageSharpFluid\n                      originalName\n                    }\n                  }\n                }\n              }\n            }\n          }\n        `}\n\n        \n        render={data => (\n          <PostCover\n            fileEdges={data.allFile.edges}\n            postNode={postNode}\n            coverHeight={coverHeight}\n            coverClassName={coverClassName}\n          />\n        )}\n      />\n    );\n  }\n}\n\nexport default queryWrapper;\n"],"sourceRoot":""}