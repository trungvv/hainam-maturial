{"version":3,"sources":["webpack:///./src/components/UserInfo/index.jsx","webpack:///./src/components/Disqus/index.jsx","webpack:///./src/components/PostInfo/index.jsx","webpack:///./src/components/SocialLinks/index.jsx","webpack:///./src/components/PostSuggestions/index.jsx","webpack:///./src/templates/post.jsx","webpack:///./src/components/PostTags/index.jsx","webpack:///./src/components/SEO/index.jsx","webpack:///./src/components/PostCover/PostCoverComponent.jsx","webpack:///./src/components/PostCover/index.jsx"],"names":["UserInfo","render","_this$props$config","this","props","config","userAvatar","userName","userLocation","userDescription","userLinks","userTwitter","expanded","userLinksElement","react_default","a","createElement","UserLinks","labeled","Card_default","className","CardTitle_default","expander","avatar","Avatars_default","src","role","title","subtitle","dist","username","options","count","CardText_default","expandable","IconSeparator_default","label","iconBefore","FontIcons_default","iconClassName","Component","Disqus","_this","_Component","call","state","toasts","notifyAboutComment","bind","assertThisInitialized_default","onSnackbarDismiss","slice","setState","push","text","_this$props","postNode","disqusShortname","post","frontmatter","url","urljoin","siteUrl","pathPrefix","fields","slug","icon","main_default","shortname","identifier","category_id","onNewComment","Snackbars_default","onDismiss","PostInfo","moment","date","format","dateFormat","timeToRead","gatsby_browser_entry","to","kebabCase_default","category","SocialLinks","postPath","mobile","iconSize","renderShareCount","filter","RedditShareButton","RedditIcon","round","size","RedditShareCount","TwitterShareButton","TwitterIcon","GooglePlusShareButton","GooglePlusIcon","GooglePlusShareCount","FacebookShareButton","quote","excerpt","FacebookIcon","FacebookShareCount","LinkedinShareButton","description","LinkedinIcon","LinkedinShareCount","TelegramShareButton","TelegramIcon","PostSuggestions","postFields","prevSlug","forceFontSize","forceSize","prevTitle","nextSlug","nextTitle","PostTemplate","_React$Component","handleResize","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","innerWidth","pageContext","postOverlapClass","data","markdownRemark","id","postDefaultCategoryID","coverHeight","layout","location","Helmet_default","siteTitle","rel","href","SEO","postSEO","PostCover","coverClassName","Cards_default","components_PostInfo","dangerouslySetInnerHTML","__html","html","PostTags","tags","components_SocialLinks","components_UserInfo","components_Disqus","components_PostSuggestions_PostSuggestions","React","pageQuery","react__WEBPACK_IMPORTED_MODULE_2___default","map","tag","gatsby__WEBPACK_IMPORTED_MODULE_3__","key","style","textDecoration","lodash_kebabCase__WEBPACK_IMPORTED_MODULE_1___default","react_md_lib_Chips__WEBPACK_IMPORTED_MODULE_4___default","image","postURL","postMeta","cover","siteDescription","siteLogo","blogURL","schemaOrgJSONLD","@context","@type","name","alternateName","siteTitleAlt","itemListElement","position","item","@id","headline","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","content","type","JSON","stringify","property","siteFBAppID","fileEdges","coverNodeList","fileNode","node","childImageSharp","absolutePath","indexOf","path","join","length","gatsby_image_default","fluid","outerWrapperClassName","height","width","coverURL","substring","__PATH_PREFIX__","backgroundImage","queryWrapper","query","PostCoverComponent","allFile","edges","_590853412"],"mappings":"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","file":"component---src-templates-post-jsx-8346cd65757dbde422b8.js","sourcesContent":["import React, { Component } from \"react\";\nimport Card from \"react-md/lib/Cards/Card\";\nimport CardTitle from \"react-md/lib/Cards/CardTitle\";\nimport CardText from \"react-md/lib/Cards/CardText\";\nimport Avatar from \"react-md/lib/Avatars\";\nimport FontIcon from \"react-md/lib/FontIcons\";\nimport IconSeparator from \"react-md/lib/Helpers/IconSeparator\";\nimport { Follow } from \"react-twitter-widgets\";\nimport UserLinks from \"../UserLinks\";\nimport \"./UserInfo.scss\";\n\nclass UserInfo extends Component {\n  render() {\n    const {\n      userAvatar,\n      userName,\n      userLocation,\n      userDescription,\n      userLinks,\n      userTwitter\n    } = this.props.config;\n    const { expanded } = this.props;\n    const userLinksElement = (\n      <UserLinks config={this.props.config} labeled={expanded} />\n    );\n    if (!userAvatar && !userName && !userLocation && !userDescription) {\n      if (userLinks) {\n        return (\n          <Card className=\"md-grid md-cell md-cell--12 user-info\">\n            {userLinksElement}\n          </Card>\n        );\n      }\n      return null;\n    }\n    return (\n      <Card className=\"md-grid md-cell md-cell--12 user-info\">\n        <CardTitle\n          expander={!expanded}\n          avatar={userAvatar && <Avatar src={userAvatar} role=\"presentation\" />}\n          title={userName && userName}\n          subtitle={\n            userTwitter ? (\n              <Follow\n                username={userTwitter}\n                options={{ count: expanded ? \"none\" : \"none\" }}\n              />\n            ) : (\n              \"Author\"\n            )\n          }\n        />\n        <CardText expandable={!expanded}>\n          {userLocation && (\n            <IconSeparator label={userLocation} iconBefore>\n              <FontIcon iconClassName=\"fa fa-map-marker\" />\n            </IconSeparator>\n          )}\n          <p>{userDescription && userDescription}</p>\n          {userLinksElement}\n        </CardText>\n      </Card>\n    );\n  }\n}\n\nexport default UserInfo;\n","import React, { Component } from \"react\";\nimport ReactDisqusComments from \"react-disqus-comments\";\nimport urljoin from \"url-join\";\nimport Card from \"react-md/lib/Cards/Card\";\nimport CardTitle from \"react-md/lib/Cards/CardTitle\";\nimport CardText from \"react-md/lib/Cards/CardText\";\nimport Avatar from \"react-md/lib/Avatars\";\nimport FontIcon from \"react-md/lib/FontIcons\";\nimport Snackbar from \"react-md/lib/Snackbars\";\nimport config from \"../../../data/SiteConfig\";\n\nclass Disqus extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      toasts: []\n    };\n    this.notifyAboutComment = this.notifyAboutComment.bind(this);\n    this.onSnackbarDismiss = this.onSnackbarDismiss.bind(this);\n  }\n\n  onSnackbarDismiss() {\n    const [, ...toasts] = this.state.toasts;\n    this.setState({ toasts });\n  }\n  notifyAboutComment() {\n    const toasts = this.state.toasts.slice();\n    toasts.push({ text: \"New comment available!\" });\n    this.setState({ toasts });\n  }\n  render() {\n    const { postNode, expanded } = this.props;\n    if (!config.disqusShortname) {\n      return null;\n    }\n    const post = postNode.frontmatter;\n    const url = urljoin(\n      config.siteUrl,\n      config.pathPrefix,\n      postNode.fields.slug\n    );\n\n    return (\n      <Card className=\"md-grid md-cell md-cell--12\">\n        <CardTitle\n          title=\"Comments\"\n          avatar={<Avatar icon={<FontIcon>comment</FontIcon>} />}\n          expander={!expanded}\n        />\n        <CardText expandable={!expanded}>\n          <ReactDisqusComments\n            shortname={config.disqusShortname}\n            identifier={post.title}\n            title={post.title}\n            url={url}\n            category_id={post.category_id}\n            onNewComment={this.notifyAboutComment}\n          />\n        </CardText>\n        <Snackbar\n          toasts={this.state.toasts}\n          onDismiss={this.onSnackbarDismiss}\n        />\n      </Card>\n    );\n  }\n}\n\nexport default Disqus;\n","import React, { Component } from \"react\";\nimport CardTitle from \"react-md/lib/Cards/CardTitle\";\nimport Avatar from \"react-md/lib/Avatars\";\nimport FontIcon from \"react-md/lib/FontIcons\";\nimport { Link } from \"gatsby\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\nimport config from \"../../../data/SiteConfig\";\nimport \"./PostInfo.scss\";\n\nclass PostInfo extends Component {\n  render() {\n    const { postNode } = this.props;\n    const post = postNode.frontmatter;\n    return (\n      <div className=\"post-info\">\n        <CardTitle\n          avatar={<Avatar icon={<FontIcon iconClassName=\"fa fa-calendar\" />} />}\n          title={`Published on ${moment(postNode.fields.date).format(\n            config.dateFormat\n          )}`}\n          subtitle={`${postNode.timeToRead} min read`}\n        />\n        <Link\n          className=\"category-link\"\n          to={`/categories/${_.kebabCase(post.category)}`}\n        >\n          <CardTitle\n            avatar={\n              <Avatar icon={<FontIcon iconClassName=\"fa fa-folder-open\" />} />\n            }\n            title=\"In category\"\n            subtitle={post.category}\n          />\n        </Link>\n      </div>\n    );\n  }\n}\n\nexport default PostInfo;\n","import React, { Component } from \"react\";\nimport {\n  FacebookShareButton,\n  GooglePlusShareButton,\n  LinkedinShareButton,\n  TwitterShareButton,\n  TelegramShareButton,\n  RedditShareButton,\n  FacebookShareCount,\n  GooglePlusShareCount,\n  LinkedinShareCount,\n  RedditShareCount,\n  FacebookIcon,\n  TwitterIcon,\n  TelegramIcon,\n  GooglePlusIcon,\n  LinkedinIcon,\n  RedditIcon\n} from \"react-share\";\nimport urljoin from \"url-join\";\nimport config from \"../../../data/SiteConfig\";\nimport \"./SocialLinks.scss\";\n\nclass SocialLinks extends Component {\n  render() {\n    const { postNode, postPath, mobile } = this.props;\n    const post = postNode.frontmatter;\n    const url = urljoin(config.siteUrl, config.pathPrefix, postPath);\n    const iconSize = mobile ? 36 : 48;\n    const filter = count => (count > 0 ? count : \"\");\n    const renderShareCount = count => (\n      <div className=\"share-count\">{filter(count)}</div>\n    );\n\n    return (\n      <div className=\"social-links\">\n        <RedditShareButton url={url} title={post.title}>\n          <RedditIcon round size={iconSize} />\n          <RedditShareCount url={url}>\n            {count => renderShareCount(count)}\n          </RedditShareCount>\n        </RedditShareButton>\n        <TwitterShareButton url={url} title={post.title}>\n          <TwitterIcon round size={iconSize} />\n        </TwitterShareButton>\n        <GooglePlusShareButton url={url}>\n          <GooglePlusIcon round size={iconSize} />\n          <GooglePlusShareCount url={url}>\n            {count => renderShareCount(count)}\n          </GooglePlusShareCount>\n        </GooglePlusShareButton>\n        <FacebookShareButton url={url} quote={postNode.excerpt}>\n          <FacebookIcon round size={iconSize} />\n          <FacebookShareCount url={url}>\n            {count => renderShareCount(count)}\n          </FacebookShareCount>\n        </FacebookShareButton>\n        <LinkedinShareButton\n          url={url}\n          title={post.title}\n          description={postNode.excerpt}\n        >\n          <LinkedinIcon round size={iconSize} />\n          <LinkedinShareCount url={url}>\n            {count => renderShareCount(count)}\n          </LinkedinShareCount>\n        </LinkedinShareButton>\n        <TelegramShareButton url={url}>\n          <TelegramIcon round size={iconSize} />\n        </TelegramShareButton>\n      </div>\n    );\n  }\n}\n\nexport default SocialLinks;\n","import React, { Component } from \"react\";\nimport FontIcon from \"react-md/lib/FontIcons\";\nimport { Link } from \"gatsby\";\nimport \"./PostSuggestions.scss\";\n\nexport default class PostSuggestions extends Component {\n  render() {\n    const { postNode } = this.props;\n    const postFields = postNode.fields;\n    return (\n      <div className=\"post-suggestions md-grid md-cell--12\">\n        <Link to={postFields.prevSlug} className=\"post-suggestion\">\n          <FontIcon\n            forceFontSize\n            forceSize={64}\n            className=\"secondary-color arrow-nav\"\n          >\n            arrow_back\n          </FontIcon>\n          <div className=\"headline-container hide-on-mobile\">\n            <h2 className=\"md-body-2 secondary-color\">Previous</h2>\n            <h6 className=\"md-headline secondary-color\">\n              {postFields.prevTitle}\n            </h6>\n          </div>\n        </Link>\n        <Link to={postFields.nextSlug} className=\"post-suggestion\">\n          <div className=\"headline-container\">\n            <h2 className=\"md-body-2 secondary-color\">Next</h2>\n            <h6 className=\"md-headline secondary-color\">\n              {postFields.nextTitle}\n            </h6>\n          </div>\n          <FontIcon\n            forceFontSize\n            forceSize={64}\n            className=\"secondary-color arrow-nav\"\n          >\n            arrow_forward\n          </FontIcon>\n        </Link>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport Helmet from \"react-helmet\";\nimport { graphql } from \"gatsby\";\nimport Card from \"react-md/lib/Cards\";\nimport CardText from \"react-md/lib/Cards/CardText\";\nimport Layout from \"../layout\";\nimport UserInfo from \"../components/UserInfo\";\nimport Disqus from \"../components/Disqus\";\nimport PostTags from \"../components/PostTags\";\nimport PostCover from \"../components/PostCover\";\nimport PostInfo from \"../components/PostInfo\";\nimport SocialLinks from \"../components/SocialLinks\";\nimport PostSuggestions from \"../components/PostSuggestions\";\nimport SEO from \"../components/SEO\";\nimport config from \"../../data/SiteConfig\";\nimport \"./b16-tomorrow-dark.css\";\nimport \"./post.scss\";\n\nexport default class PostTemplate extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mobile: true\n    };\n    this.handleResize = this.handleResize.bind(this);\n  }\n  componentDidMount() {\n    this.handleResize();\n    window.addEventListener(\"resize\", this.handleResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleResize);\n  }\n\n  handleResize() {\n    if (window.innerWidth >= 640) {\n      this.setState({ mobile: false });\n    } else {\n      this.setState({ mobile: true });\n    }\n  }\n\n  render() {\n    const { mobile } = this.state;\n    const { slug } = this.props.pageContext;\n    const expanded = !mobile;\n    const postOverlapClass = mobile ? \"post-overlap-mobile\" : \"post-overlap\";\n    const postNode = this.props.data.markdownRemark;\n    const post = postNode.frontmatter;\n    if (!post.id) {\n      post.id = slug;\n    }\n    if (!post.category_id) {\n      post.category_id = config.postDefaultCategoryID;\n    }\n\n    const coverHeight = mobile ? 180 : 350;\n    return (\n      <Layout location={this.props.location}>\n        <div className=\"post-page md-grid md-grid--no-spacing\">\n          <Helmet>\n            <title>{`${post.title} | ${config.siteTitle}`}</title>\n            <link rel=\"canonical\" href={`${config.siteUrl}${post.id}`} />\n          </Helmet>\n          <SEO postPath={slug} postNode={postNode} postSEO />\n          <PostCover\n            postNode={postNode}\n            coverHeight={coverHeight}\n            coverClassName=\"md-grid md-cell--9 post-cover\"\n          />\n          <div\n            className={`md-grid md-cell--9 post-page-contents mobile-fix ${postOverlapClass}`}\n          >\n            <Card className=\"md-grid md-cell md-cell--12 post\">\n              <CardText className=\"post-body\">\n                <h1 className=\"md-display-2 post-header\">{post.title}</h1>\n                <PostInfo postNode={postNode} />\n                <div dangerouslySetInnerHTML={{ __html: postNode.html }} />\n              </CardText>\n              <div className=\"post-meta\">\n                <PostTags tags={post.tags} />\n                <SocialLinks\n                  postPath={slug}\n                  postNode={postNode}\n                  mobile={this.state.mobile}\n                />\n              </div>\n            </Card>\n            <UserInfo\n              className=\"md-grid md-cell md-cell--12\"\n              config={config}\n              expanded={expanded}\n            />\n            <Disqus postNode={postNode} expanded={expanded} />\n          </div>\n\n          <PostSuggestions postNode={postNode} />\n        </div>\n      </Layout>\n    );\n  }\n}\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      timeToRead\n      excerpt\n      frontmatter {\n        title\n        cover\n        date\n        category\n        tags\n      }\n      fields {\n        nextTitle\n        nextSlug\n        prevTitle\n        prevSlug\n        slug\n        date\n      }\n    }\n  }\n`;\n","import React, { Component } from \"react\";\nimport _ from \"lodash\";\nimport { Link } from \"gatsby\";\nimport Chip from \"react-md/lib/Chips\";\nimport \"./PostTags.scss\";\n\nclass PostTags extends Component {\n  render() {\n    const { tags } = this.props;\n    return (\n      <div className=\"post-tag-container\">\n        {tags &&\n          tags.map(tag => (\n            <Link\n              key={tag}\n              style={{ textDecoration: \"none\" }}\n              to={`/tags/${_.kebabCase(tag)}`}\n            >\n              <Chip label={tag} className=\"post-preview-tags\" />\n            </Link>\n          ))}\n      </div>\n    );\n  }\n}\n\nexport default PostTags;\n","import React, { Component } from \"react\";\nimport Helmet from \"react-helmet\";\nimport urljoin from \"url-join\";\nimport config from \"../../../data/SiteConfig\";\n\nclass SEO extends Component {\n  render() {\n    const { postNode, postPath, postSEO } = this.props;\n    let title;\n    let description;\n    let image;\n    let postURL;\n    if (postSEO) {\n      const postMeta = postNode.frontmatter;\n      ({ title } = postMeta);\n      description = postMeta.description\n        ? postMeta.description\n        : postNode.excerpt;\n      image = postMeta.cover;\n      postURL = urljoin(config.siteUrl, config.pathPrefix, postPath);\n    } else {\n      title = config.siteTitle;\n      description = config.siteDescription;\n      image = config.siteLogo;\n    }\n    image = urljoin(config.siteUrl, config.pathPrefix, image);\n    const blogURL = urljoin(config.siteUrl, config.pathPrefix);\n    const schemaOrgJSONLD = [\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"WebSite\",\n        url: blogURL,\n        name: title,\n        alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\"\n      }\n    ];\n    if (postSEO) {\n      schemaOrgJSONLD.push([\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          itemListElement: [\n            {\n              \"@type\": \"ListItem\",\n              position: 1,\n              item: {\n                \"@id\": postURL,\n                name: title,\n                image\n              }\n            }\n          ]\n        },\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BlogPosting\",\n          url: blogURL,\n          name: title,\n          alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\",\n          headline: title,\n          image: {\n            \"@type\": \"ImageObject\",\n            url: image\n          },\n          description\n        }\n      ]);\n    }\n    return (\n      <Helmet>\n        {/* General tags */}\n        <meta name=\"description\" content={description} />\n        <meta name=\"image\" content={image} />\n\n        {/* Schema.org tags */}\n        <script type=\"application/ld+json\">\n          {JSON.stringify(schemaOrgJSONLD)}\n        </script>\n\n        {/* OpenGraph tags */}\n        <meta property=\"og:url\" content={postSEO ? postURL : blogURL} />\n        {postSEO ? <meta property=\"og:type\" content=\"article\" /> : null}\n        <meta property=\"og:title\" content={title} />\n        <meta property=\"og:description\" content={description} />\n        <meta property=\"og:image\" content={image} />\n        <meta\n          property=\"fb:app_id\"\n          content={config.siteFBAppID ? config.siteFBAppID : \"\"}\n        />\n\n        {/* Twitter Card tags */}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta\n          name=\"twitter:creator\"\n          content={config.userTwitter ? config.userTwitter : \"\"}\n        />\n        <meta name=\"twitter:title\" content={title} />\n        <meta name=\"twitter:description\" content={description} />\n        <meta name=\"twitter:image\" content={image} />\n      </Helmet>\n    );\n  }\n}\n\nexport default SEO;\n","import React, { Component } from \"react\";\nimport Img from \"gatsby-image\";\nimport path from \"path\";\nimport \"./PostCover.scss\";\n\nclass PostCover extends Component {\n  render() {\n    const { fileEdges, postNode, coverHeight, coverClassName } = this.props;\n    const post = postNode.frontmatter ? postNode.frontmatter : postNode;\n    const coverNodeList = fileEdges.filter(fileNode => {\n      if (fileNode.node.childImageSharp === null) return false;\n\n      if (\n        fileNode.node.absolutePath.indexOf(\n          path.join(\"/static/assets/\", post.cover)\n        ) !== -1\n      )\n        return true;\n\n      return false;\n    });\n\n    if (coverNodeList.length === 1) {\n      return (\n        <Img\n          fluid={coverNodeList[0].node.childImageSharp.fluid}\n          outerWrapperClassName={coverClassName}\n          style={{ height: coverHeight, width: \"100%\" }}\n        />\n      );\n    }\n\n    /* eslint no-undef: \"off\" */\n    const coverURL =\n      post.cover.substring(0, 1) === \"/\"\n        ? __PATH_PREFIX__ + post.cover\n        : post.cover;\n    return (\n      <div\n        style={{\n          backgroundImage: `url(${coverURL})`,\n          height: `${coverHeight}px`\n        }}\n        className={coverClassName}\n      />\n    );\n  }\n}\n\nexport default PostCover;\n","import React, { Component } from \"react\";\nimport { StaticQuery, graphql } from \"gatsby\";\nimport PostCover from \"./PostCoverComponent\";\n\nclass queryWrapper extends Component {\n  render() {\n    const { postNode, coverHeight, coverClassName } = this.props;\n    return (\n      <StaticQuery\n        query={graphql`\n          query CoverQuery {\n            allFile {\n              edges {\n                node {\n                  id\n                  absolutePath\n                  childImageSharp {\n                    id\n                    resolutions {\n                      base64\n                      tracedSVG\n                      aspectRatio\n                      width\n                      height\n                      src\n                      srcSet\n                      srcWebp\n                      srcSetWebp\n                      originalName\n                    }\n                    internal {\n                      contentDigest\n                      type\n                      owner\n                    }\n                    fluid(maxWidth: 1240) {\n                      ...GatsbyImageSharpFluid\n                      originalName\n                    }\n                  }\n                }\n              }\n            }\n          }\n        `}\n\n        \n        render={data => (\n          <PostCover\n            fileEdges={data.allFile.edges}\n            postNode={postNode}\n            coverHeight={coverHeight}\n            coverClassName={coverClassName}\n          />\n        )}\n      />\n    );\n  }\n}\n\nexport default queryWrapper;\n"],"sourceRoot":""}