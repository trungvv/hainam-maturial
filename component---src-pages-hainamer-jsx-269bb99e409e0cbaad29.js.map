{"version":3,"sources":["webpack:///./src/pages/hainamer.jsx","webpack:///./node_modules/url-join/lib/url-join.js","webpack:///./src/components/SEO/index.jsx","webpack:///./src/components/PostPreview/index.jsx","webpack:///./src/components/PostListing/index.jsx"],"names":["Hainamer","render","data","this","props","allMarkdownRemark","content","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_components_SEO__WEBPACK_IMPORTED_MODULE_5__","postEdges","edges","_components_PostListing__WEBPACK_IMPORTED_MODULE_4__","_layout__WEBPACK_IMPORTED_MODULE_3__","location","title","className","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","config","siteTitle","rel","href","siteUrl","type","React","Component","pageQuery","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","definition","strArray","resultArray","match","length","first","shift","replace","i","component","TypeError","push","str","join","parts","split","normalize","arguments","slice","call","module","exports","undefined","__webpack_require__","SEO","description","image","postURL","_this$props","postNode","postPath","postSEO","postMeta","frontmatter","excerpt","urljoin","cover","siteDescription","siteLogo","blogURL","schemaOrgJSONLD","@context","@type","url","name","alternateName","siteTitleAlt","itemListElement","position","item","@id","headline","JSON","stringify","property","siteFBAppID","userTwitter","PostPreview","_this","_Component","state","mobile","handleResize","bind","assertThisInitialized_default","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","innerWidth","setState","postInfo","coverHeight","react_default","key","gatsby_browser_entry","to","path","PostCover","moment","date","format","dateFormat","PostListing","getPostList","postList","forEach","postEdge","node","fields","slug","tags","timeToRead","templateKey","map","post","components_PostPreview"],"mappings":"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","file":"component---src-pages-hainamer-jsx-269bb99e409e0cbaad29.js","sourcesContent":["import React from \"react\";\nimport Helmet from \"react-helmet\";\nimport { graphql } from \"gatsby\";\nimport Layout from \"../layout\";\nimport PostListing from \"../components/PostListing\";\nimport SEO from \"../components/SEO\";\nimport config from \"../../data/SiteConfig\";\n\nclass Hainamer extends React.Component {\n  render() {\n    const data = this.props.data.allMarkdownRemark;\n    \n    const content = data ? \n      <div>\n        <SEO postEdges={data.edges} />\n        <PostListing postEdges={data.edges} />\n      </div>\n    : <h1>Khong co du lieu</h1>\n  \n    \n    return (\n      <Layout location={this.props.location} title=\"HaiNamer\">\n        <div className=\"index-container\">\n          <Helmet>\n            <title>{config.siteTitle}</title>\n            <link rel=\"canonical\" href={`${config.siteUrl}/hainamer/`} />\n            <link href=\"/logos/favicon.ico\" rel=\"icon\" type=\"image/x-icon\" />\n          </Helmet>\n          {content}\n\n        </div>\n      </Layout>\n    );\n  }\n}\n\nexport default Hainamer;\n\nexport const pageQuery = graphql`\n  query IndexQuery {\n    allMarkdownRemark(\n      filter: {frontmatter: {templateKey: {eq: \"hainamer\"}}},\n      limit: 2000\n      sort: { fields: [fields___date], order: DESC }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n            date\n          }\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            tags\n            cover\n            date\n            templateKey\n          }\n        }\n      }\n    }\n  }\n`;\n","(function (name, context, definition) {\n  if (typeof module !== 'undefined' && module.exports) module.exports = definition();\n  else if (typeof define === 'function' && define.amd) define(definition);\n  else context[name] = definition();\n})('urljoin', this, function () {\n\n  function normalize (strArray) {\n    var resultArray = [];\n\n    // If the first part is a plain protocol, we combine it with the next part.\n    if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n      var first = strArray.shift();\n      strArray[0] = first + strArray[0];\n    }\n\n    // There must be two or three slashes in the file protocol, two slashes in anything else.\n    if (strArray[0].match(/^file:\\/\\/\\//)) {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n    } else {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n    }\n\n    for (var i = 0; i < strArray.length; i++) {\n      var component = strArray[i];\n\n      if (typeof component !== 'string') {\n        throw new TypeError('Url must be a string. Received ' + component);\n      }\n\n      if (component === '') { continue; }\n\n      if (i > 0) {\n        // Removing the starting slashes for each component but the first.\n        component = component.replace(/^[\\/]+/, '');\n      }\n      if (i < strArray.length - 1) {\n        // Removing the ending slashes for each component but the last.\n        component = component.replace(/[\\/]+$/, '');\n      } else {\n        // For the last component we will combine multiple slashes to a single one.\n        component = component.replace(/[\\/]+$/, '/');\n      }\n\n      resultArray.push(component);\n\n    }\n\n    var str = resultArray.join('/');\n    // Each input component is now separated by a single slash except the possible first plain protocol part.\n\n    // remove trailing slash before parameters or hash\n    str = str.replace(/\\/(\\?|&|#[^!])/g, '$1');\n\n    // replace ? in parameters with &\n    var parts = str.split('?');\n    str = parts.shift() + (parts.length > 0 ? '?': '') + parts.join('&');\n\n    return str;\n  }\n\n  return function () {\n    var input;\n\n    if (typeof arguments[0] === 'object') {\n      input = arguments[0];\n    } else {\n      input = [].slice.call(arguments);\n    }\n\n    return normalize(input);\n  };\n\n});\n","import React, { Component } from \"react\";\nimport Helmet from \"react-helmet\";\nimport urljoin from \"url-join\";\nimport config from \"../../../data/SiteConfig\";\n\nclass SEO extends Component {\n  render() {\n    const { postNode, postPath, postSEO } = this.props;\n    let title;\n    let description;\n    let image;\n    let postURL;\n    if (postSEO) {\n      const postMeta = postNode.frontmatter;\n      ({ title } = postMeta);\n      description = postMeta.description\n        ? postMeta.description\n        : postNode.excerpt;\n      // image = postMeta.cover;\n      // postURL = urljoin(config.siteUrl, config.pathPrefix, postPath);\n      image = urljoin(config.siteUrl, \"/assets\", postMeta.cover);\n      postURL = urljoin(config.siteUrl, postPath);\n    } else {\n      title = config.siteTitle;\n      description = config.siteDescription;\n      // image = config.siteLogo;\n      image = urljoin(config.siteUrl, config.siteLogo);\n    }\n    // image = urljoin(config.siteUrl, \"/assets\", image);\n    // const blogURL = urljoin(config.siteUrl, config.pathPrefix);\n\n    const blogURL = config.siteUrl;\n    const schemaOrgJSONLD = [\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"WebSite\",\n        url: blogURL,\n        name: title,\n        alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\"\n      }\n    ];\n    if (postSEO) {\n      schemaOrgJSONLD.push([\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          itemListElement: [\n            {\n              \"@type\": \"ListItem\",\n              position: 1,\n              item: {\n                \"@id\": postURL,\n                name: title,\n                image\n              }\n            }\n          ]\n        },\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BlogPosting\",\n          url: blogURL,\n          name: title,\n          alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\",\n          headline: title,\n          image: {\n            \"@type\": \"ImageObject\",\n            url: image\n          },\n          description\n        }\n      ]);\n    }\n    return (\n      <Helmet>\n        {/* General tags */}\n        <meta name=\"description\" content={description} />\n        <meta name=\"image\" content={image} />\n\n        {/* Schema.org tags */}\n        <script type=\"application/ld+json\">\n          {JSON.stringify(schemaOrgJSONLD)}\n        </script>\n\n        {/* OpenGraph tags */}\n        <meta property=\"og:url\" content={postSEO ? postURL : blogURL} />\n        {postSEO ? <meta property=\"og:type\" content=\"article\" /> : null}\n        <meta property=\"og:title\" content={title} />\n        <meta property=\"og:description\" content={description} />\n        <meta property=\"og:image\" content={image} />\n        <meta\n          property=\"fb:app_id\"\n          content={config.siteFBAppID ? config.siteFBAppID : \"\"}\n        />\n\n        {/* Twitter Card tags */}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta\n          name=\"twitter:creator\"\n          content={config.userTwitter ? config.userTwitter : \"\"}\n        />\n        <meta name=\"twitter:title\" content={title} />\n        <meta name=\"twitter:description\" content={description} />\n        <meta name=\"twitter:image\" content={image} />\n      </Helmet>\n    );\n  }\n}\n\nexport default SEO;\n","import React, { Component } from \"react\";\n\nimport { Link } from \"gatsby\";\nimport moment from \"moment\";\nimport PostCover from \"../PostCover\";\nimport config from \"../../../data/SiteConfig\";\nimport \"./PostPreview.scss\";\n\nclass PostPreview extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mobile: true\n    };\n    this.handleResize = this.handleResize.bind(this);\n  }\n  componentDidMount() {\n    this.handleResize();\n    window.addEventListener(\"resize\", this.handleResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleResize);\n  }\n\n  handleResize() {\n    if (window.innerWidth >= 640) {\n      this.setState({ mobile: false });\n    } else {\n      this.setState({ mobile: true });\n    }\n  }\n  render() {\n    const { postInfo } = this.props;\n    const { mobile } = this.state;\n    const expand = mobile;\n    /* eslint no-undef: \"off\" */\n    const coverHeight = mobile ? 162 : 225;\n    return (\n      <div className=\"col-lg-4 col-md-6 mt-4 mb-4\">\n                <div className=\"card\" key={postInfo.title}>\n                    <Link to={postInfo.path}>\n                        <PostCover postNode={postInfo} coverHeight={coverHeight} />\n                    </Link>\n                    <div className=\"card-body\">\n                        <Link to={postInfo.path}>\n                            <h5 className=\"media-title\">{postInfo.title}</h5>\n                        </Link>\n                        <p className=\"card-subtitle\">\n                            <small className=\"text-muted\">\n                              {moment(postInfo.date).format( config.dateFormat)}\n                            </small>\n                        </p>\n                        <div className=\"overflow-hidden\">\n                            <p className=\"card-text text-justify\">{postInfo.excerpt}</p>\n                        </div>\n                    </div>\n                    \n                </div>\n                \n            </div>\n    );\n  }\n}\n\nexport default PostPreview;\n","import React from \"react\";\nimport PostPreview from \"../PostPreview\";\n\nclass PostListing extends React.Component {\n  getPostList() {\n    const postList = [];\n    this.props.postEdges.forEach(postEdge => {\n      postList.push({\n        path: postEdge.node.fields.slug,\n        tags: postEdge.node.frontmatter.tags,\n        cover: postEdge.node.frontmatter.cover,\n        title: postEdge.node.frontmatter.title,\n        date: postEdge.node.fields.date,\n        excerpt: postEdge.node.excerpt,\n        timeToRead: postEdge.node.timeToRead,\n        templateKey: postEdge.node.frontmatter.templateKey,\n      });\n    });\n    return postList;\n  }\n  render() {\n    const postList = this.getPostList();\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          {postList.map(post => (\n            <PostPreview key={post.title} postInfo={post} />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PostListing;\n"],"sourceRoot":""}