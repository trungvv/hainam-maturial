{"version":3,"sources":["webpack:///./src/templates/tag.jsx","webpack:///./src/components/PostTags/index.jsx","webpack:///./src/components/PostPreview/index.jsx","webpack:///./src/components/PostListing/index.jsx"],"names":["TagTemplate","render","tag","this","props","pageContext","postEdges","data","allMarkdownRemark","edges","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_layout__WEBPACK_IMPORTED_MODULE_3__","location","title","charAt","toUpperCase","slice","className","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","config","siteTitle","rel","href","siteUrl","type","_components_PostListing__WEBPACK_IMPORTED_MODULE_4__","React","Component","pageQuery","PostTags","tags","react__WEBPACK_IMPORTED_MODULE_2___default","map","gatsby__WEBPACK_IMPORTED_MODULE_3__","key","style","textDecoration","to","lodash_kebabCase__WEBPACK_IMPORTED_MODULE_1___default","PostPreview","_this","_Component","call","state","mobile","handleResize","bind","assertThisInitialized_default","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","innerWidth","setState","postInfo","coverHeight","react_default","gatsby_browser_entry","path","PostCover","postNode","moment","date","format","dateFormat","excerpt","PostListing","getPostList","postList","forEach","postEdge","push","node","fields","slug","frontmatter","cover","timeToRead","post","components_PostPreview"],"mappings":"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","file":"component---src-templates-tag-jsx-0aba6272561585efc5c8.js","sourcesContent":["import React from \"react\";\nimport Helmet from \"react-helmet\";\nimport { graphql } from \"gatsby\";\nimport Layout from \"../layout\";\nimport PostListing from \"../components/PostListing\";\nimport config from \"../../data/SiteConfig\";\n\nexport default class TagTemplate extends React.Component {\n  render() {\n    const { tag } = this.props.pageContext;\n    const postEdges = this.props.data.allMarkdownRemark.edges;\n\n    return (\n      <Layout\n        location={this.props.location}\n        title={`Tagged in ${tag.charAt(0).toUpperCase() + tag.slice(1)}`}\n      >\n        <div className=\"tag-container\">\n          <Helmet>\n            <title>{`Posts tagged as \"${tag}\" | ${config.siteTitle}`}</title>\n            <link rel=\"canonical\" href={`${config.siteUrl}/tags/${tag}`} />\n            <link href=\"/logos/favicon.ico\" rel=\"icon\" type=\"image/x-icon\" />\n          </Helmet>\n          <PostListing postEdges={postEdges} />\n        </div>\n      </Layout>\n    );\n  }\n}\n\nexport const pageQuery = graphql`\n  query TagPage($tag: String) {\n    allMarkdownRemark(\n      limit: 1000\n      sort: { fields: [fields___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n            date\n          }\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            tags\n            cover\n            date\n          }\n        }\n      }\n    }\n  }\n`;\n","import React, { Component } from \"react\";\nimport _ from \"lodash\";\nimport { Link } from \"gatsby\";\nimport \"./PostTags.scss\";\n\nclass PostTags extends Component {\n  render() {\n    const { tags } = this.props;\n    return (\n      <div className=\"post-tag-container\">\n        Tags: {tags &&\n          tags.map(tag => (\n            <Link\n              key={tag}\n              style={{ textDecoration: \"none\" }}\n              to={`/tags/${_.kebabCase(tag)}`}\n            >\n            <span className=\"badge badge-pill badge-light\">{tag}</span>\n              {/* <Chip label={tag} className=\"post-preview-tags\" /> */}\n            </Link>\n          ))}\n      </div>\n    );\n  }\n}\n\nexport default PostTags;\n","import React, { Component } from \"react\";\n\nimport { Link } from \"gatsby\";\nimport moment from \"moment\";\nimport PostTags from \"../PostTags\";\nimport PostCover from \"../PostCover\";\nimport config from \"../../../data/SiteConfig\";\nimport \"./PostPreview.scss\";\n\nclass PostPreview extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mobile: true\n    };\n    this.handleResize = this.handleResize.bind(this);\n  }\n  componentDidMount() {\n    this.handleResize();\n    window.addEventListener(\"resize\", this.handleResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleResize);\n  }\n\n  handleResize() {\n    if (window.innerWidth >= 640) {\n      this.setState({ mobile: false });\n    } else {\n      this.setState({ mobile: true });\n    }\n  }\n  render() {\n    const { postInfo } = this.props;\n    const { mobile } = this.state;\n    const expand = mobile;\n    /* eslint no-undef: \"off\" */\n    const coverHeight = mobile ? 162 : 225;\n    return (\n      <div className=\"col-lg-4 col-md-6 mt-4 mb-4\">\n                <div className=\"card\" key={postInfo.title}>\n                    <Link to={postInfo.path}>\n                        {/* <div className=\"custom-card-img\">\n                            <img className=\"card-img-top\" src={productInfo.cover} alt=\"Card image cap\" />\n                        </div> */}\n                        <PostCover postNode={postInfo} coverHeight={coverHeight} />\n                    </Link>\n                    <div className=\"card-body\">\n                        <Link to={postInfo.path}>\n                            <h5 className=\"media-title\">{postInfo.title}</h5>\n                        </Link>\n                        <p className=\"card-subtitle\">\n                            <small className=\"text-muted\">\n                              {moment(postInfo.date).format( config.dateFormat)}\n                            </small>\n                        </p>\n                        <div className=\"overflow-hidden\">\n                            <p className=\"card-text text-justify\">{postInfo.excerpt}</p>\n                        </div>\n                    </div>\n                    \n                </div>\n                \n            </div>\n      // <Card key={postInfo.path} raise className=\"md-grid md-cell md-cell--12\">\n      //   <Link style={{ textDecoration: \"none\" }} to={postInfo.path}>\n      //     <Media style={{ height: coverHeight, paddingBottom: \"0px\" }}>\n      //       <PostCover postNode={postInfo} coverHeight={coverHeight} />\n      //       <MediaOverlay>\n      //         <CardTitle title={postInfo.title}>\n      //           <Button raised secondary className=\"md-cell--right\">\n      //             Read\n      //           </Button>\n      //         </CardTitle>\n      //       </MediaOverlay>\n      //     </Media>\n      //   </Link>\n      //   <CardTitle\n      //     expander={expand}\n      //     avatar={<Avatar icon={<FontIcon iconClassName=\"fa fa-calendar\" />} />}\n      //     title={`Published on ${moment(postInfo.date).format(\n      //       config.dateFormat\n      //     )}`}\n      //     subtitle={`${postInfo.timeToRead} min read`}\n      //   />\n\n      //   <CardText expandable={expand}>\n      //     {postInfo.excerpt}\n      //     <PostTags tags={postInfo.tags} />\n      //   </CardText>\n      // </Card>\n    );\n  }\n}\n\nexport default PostPreview;\n","import React from \"react\";\nimport PostPreview from \"../PostPreview\";\n\nclass PostListing extends React.Component {\n  getPostList() {\n    const postList = [];\n    this.props.postEdges.forEach(postEdge => {\n      postList.push({\n        path: postEdge.node.fields.slug,\n        tags: postEdge.node.frontmatter.tags,\n        cover: postEdge.node.frontmatter.cover,\n        title: postEdge.node.frontmatter.title,\n        date: postEdge.node.fields.date,\n        excerpt: postEdge.node.excerpt,\n        timeToRead: postEdge.node.timeToRead\n      });\n    });\n    return postList;\n  }\n  render() {\n    const postList = this.getPostList();\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          {postList.map(post => (\n            <PostPreview key={post.title} postInfo={post} />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PostListing;\n"],"sourceRoot":""}